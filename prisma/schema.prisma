// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments Comment[]
  boards Board[]
  member Member[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//model for the actual data

model Comment {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  editedAt    DateTime? @updatedAt
  text        String
  userId      String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId String
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Board {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  editedAt    DateTime? @updatedAt
  name        String
  userId      String
  publiclyVisible Boolean
  image String?
  description String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  members Member[]
  lists List[]
}

model Member {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  editedAt    DateTime? @updatedAt
  userId      String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  boards Board[]
  cards Card[]

}


model List {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  editedAt    DateTime? @updatedAt
  name        String
  boardId      String
  card Card[]
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Label{
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  editedAt    DateTime? @updatedAt
  name        String
  color String
  boardId      String
  cards Card[]
}

model Card{
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  editedAt    DateTime? @updatedAt
  name        String
  listId      String
  description String?
  image String?
  list List @relation(fields: [listId], references: [id], onDelete: Cascade)
  labels Label[]
  members Member[]
  comments Comment[]
}



